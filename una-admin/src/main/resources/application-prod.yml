server:
  port: 8090

spring:
  application:
    name: una-admin

  cloud:
    nacos:
      username: nacos
      password: nacos

      discovery:
        server-addr: localhost:8848 # 192.168.0.6:8848 # docker容器版nacos使用
        service: una-admin
        namespace: prod
      config:
        server-addr: localhost:8848 # 192.168.0.6:8848 # docker容器版nacos使用
        file-extension: yaml
        #指定分组
        group: prod
        #指定命名空间
        namespace: prod

  # Spring Cloud Sleuth+zipkin实现链路追踪
  sleuth:
    sampler:
      # 设置采样率默认为 0.1 注意之前的版本是percentage 新版本中更换为 probability
      probability: 1
  zipkin:
    base-url: http://localhost:9411/
    sender:
      type: web
    service:
      name: una-admin

  # ======================================================================mysql begin 要想切换到mysql配置 只需在 begin end中所有选择 ctrl+/即可
  # mysql数据库连接配置
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://##.14.##.65:3306/u-na?useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT%2B8
    username: root
    password: ###
  # ======================================================================mysql end

  # ======================================================================redis begin
  # redis数据库连接配置
  redis:
    # 这里不填写的话默认是 localhost和 6379
    # 注意只要是 127.#。#。# 均为本地ip 可ping通
    host: 127.0.0.1
    port: 6379
    password:
    client-type: jedis
  # ======================================================================redis end

#==============================knife4j配置=======================================
knife4j:
  # 开启增强配置
  enable: true
  basic:
    enable: true
    # 配置文件的作用是增加swagger密码访问的权限 访问查看此模块接口 需要输入下面用户名和密码
    # Basic认证用户名
    username: admin
    # Basic认证密码
    password: admin

#==============================mybatis配置=======================================
mybatis-plus:
  # xml文件在resources文件夹内【una-admin/src/main/resources/mapper/AdminMapper.xml】路径配置方式【mapper/*Mapper.xml】
  # mapper-locations: mapper/*Mapper.xml
  # 在【una-xo/src/main/resources/mapper/AdminMapper.xml】
  # 配置【mapper/**/*.xml】也可以
  # 配置 默认值：["classpath*:/mapper/**/*.xml"] 也可以
  # 在属性文件中【una-admin/src/main/java/com/lc/una/admin/mapper/AdminMapper.xml】指定xml文件路径 路径配置方式【classpath:com/lc/una/admin/mapper/*.xml】
  # 其 mapper-locations 配置 默认值：["classpath*:/mapper/**/*.xml"]
  # Maven 多模块项目的扫描路径需以 classpath*: 开头 （即加载多个 jar 包下的 XML 文件）
  # 所以即使放到 【una-xo/src/main/java/com/lc/una/xo/mapper/AdminMapper.xml】
  # 配置 默认值：["classpath*:/mapper/**/*.xml"] 也可以找到
  # 如果放在了【una-xo/src/main/java/com/lc/una/xo/temp/AdminMapper.xml】
  # 配置【mapper-locations: classpath:com/lc/una/xo/temp/*.xml】可以找到
  # 配置【mapper-locations: com/lc/una/xo/temp/**/*.xml】可以找到
  # 配置【mapper-locations: com/lc/una/xo/temp/*.xml】也可以找到 有没有classpath都一样
  # 配置【mapper-locations: classpath*:**/temp/**/*.xml】也是很行的 这个去掉classpath应该也可以 感兴趣可以自己验证
  # 总结
  # 文件在 【una-xo/src/main/java/com/lc/una/xo/mapper/AdminMapper.java】
  # 配置【mapper-locations: classpath:com/lc/una/xo/mapper/*Mapper.xml】可以
  # 配置【mapper-locations: /mapper/**/*.xml】可以
  # 配置【mapper-locations: mapper/**/*.xml】可以
  # 最后使用下面mbp默认配置【mapper-locations: classpath*:/mapper/**/*.xml】即使不配置 mapper-locations 其默认也会是这个.
  # 注意:如果没配或者配置错误 mapper-locations ,此mbp的自动配置类也会按照其默认配置路径去查找mapper,找到就会用它
  mapper-locations: classpath*:/mapper/**/*.xml
  # 实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.lc.una.commons.entity
  global-config:
    # 数据库相关配置
    db-config:
      # 主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
      id-type: UUID
      # 字段策略 IGNORED:"忽略判断",NOT_NULL:"非 NULL 判断"),NOT_EMPTY:"非空判断" 此版本取消了field-strategy配置项
      # field-strategy: NOT_EMPTY
      # 驼峰下划线转换
      # column-underline: true
      table-underline: true
      # 数据库大写下划线转换
      # capital-mode: true
      # mp2.3+ 全局表前缀 mp_
      # table-prefix: mp_
      # 逻辑删除配置
      logic-delete-value: 0
      logic-not-delete-value: 1
      # 如果插件版本是3.0-gamma这个选项必须配置,否则会nullPoint 目前这个版本没有此配置项
      # db-type=oracle
    # 刷新mapper 调试神器 此版本没有这个配置项
    # refresh: true
  # 原生配置
  configuration:
    # 配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）
    map-underscore-to-camel-case: true
    cache-enabled: false
    # 配置sql语句的日志输出 放开即可使用
    # 也可配置使用p6spy【https://mybatis.plus/guide/p6spy.html】
    # log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

#==============================actuator配置=======================================
management:
  health:
    redis:
      enabled: false # 关闭redis的健康检查 在win的redis下会报【IllegalArgumentException: Malformed \uxxxx encoding】 在Linux的redis下ok的.
  endpoints:
    web:
      base-path: /actuator #配置端点访问前缀
      exposure:
        # Actuator 默认只开放白哭 health 和 info 两个端点
        # 这里 * 代表暴露所有端点
        # include: '*' #暴露所有端点
        include: 'env' #指定端点
        # exclude: info,beans,env #在暴露所有端点的前提下，可以排除某个端点(不暴露)
    enabled-by-default: true #false 禁用所有端点 true开启所有端点
#  # 单独指定端点再处理
#  endpoint:
#    info:
#      enabled: true #上面关闭所有端点之后，又暴露指定的端点，这里暴露info端点
#    health:
#      show-details: always
#      enabled: true
