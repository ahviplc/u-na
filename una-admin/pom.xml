<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>com.lc</groupId>
        <artifactId>u-na</artifactId>
        <version>1.0.0</version>
    </parent>
    <!--Definition of groupId is redundant, because it's inherited from the parent-->
    <!--下面groupId的定义是多余的，因为它是从父级继承的-->
    <!--<groupId>com.lc</groupId>-->
    <artifactId>una-admin</artifactId>
    <modelVersion>4.0.0</modelVersion>
    <!--子模块中使用父pom版本，只需删除<version>标签,它们将从父代继承该版本,无需在子模块再次声明-->
    <!--<version>${parent.version}</version>-->
    <!--<version>${project.parent.version}</version>-->
    <packaging>jar</packaging>
    <name>una-admin</name>
    <description>una-admin:una的后端admin模块,这里引入una-xo模块</description>

    <properties>
        <java.version>1.8</java.version>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    </properties>

    <dependencies>
        <!--引入una-xo模块-->
        <dependency>
            <artifactId>una-xo</artifactId>
            <groupId>com.lc</groupId>
            <version>1.0.0</version>
        </dependency>

        <!--knife4j micro-->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-micro-spring-boot-starter</artifactId>
        </dependency>

        <!--Spring Cloud Sleuth+zipkin实现链路追踪-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-sleuth</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-sleuth-zipkin</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>

        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <!--其实默认打包出来也是下面的格式 这里写出来 是为了声明 finalName可以更改最后生成jar包的名称-->
        <finalName>${project.name}-${project.version}</finalName>
        <!--只有如下配置，才能在编译的时候把java目录中的xml文件带进去 主要针对mybatis-plus的mapper.xml文件-->
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**.*</include>
                    <include>**/*.*</include><!-- i18n能读取到 -->
                    <include>**/*/*.*</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${maven-plugin.version}</version>
                <configuration>
                    <!-- 指定该Main Class为全局的唯一入口 -->
                    <mainClass>com.lc.una.admin.AdminApplication</mainClass>
                    <layout>ZIP</layout>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal><!--可以把依赖的包都打包到生成的Jar包中-->
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--docker maven-->
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${fabric8io-docker-maven-plugin.version}</version>
                <!--全局配置-->
                <configuration>
                    <!--配置远程docker守护进程url-->
                    <!--http://192.168.0.6:2375 也可-->
                    <dockerHost>tcp://192.168.0.6:2375</dockerHost>
                    <!--认证配置,用于私有registry认证-->
                    <!--<authConfig>
                        <username>admin</username>
                        <password>admin</password>
                    </authConfig>-->
                    <!--镜像相关配置,支持多镜像-->
                    <images>
                        <!-- 单个镜像配置 -->
                        <image>
                            <!--镜像名(含版本号)-->
                            <name>ahviplc/${project.name}:${project.version}</name>
                            <!--registry地址,用于推送,拉取镜像-->
                            <registry>192.168.0.6</registry>
                            <!--镜像build相关配置-->
                            <build>
                                <!--使用dockerFile文件-->
                                <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                            </build>
                        </image>
                    </images>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
